'''Встроенные функции'''

'''общеизвестные : print, len, max, min, input, sum, sorted, dir...'''

'''lambda -> анонимная функция (та же самая функция, только без имени)'''

lambda параметры: 'что функция возвращает'


def add_nums(x, y):
    return x + y
add_nums(5, 6)


lambda x, y: x + y (6, 7)

a = lambda x, y: x + y
a(6, 7)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

dict_ = {1: 'a', 2: 'b', 3: 'c'}

dict_keys = lambda x: x.keys()
print(dict_keys(dict_))

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

ls = [1, 2, 3, 4, 5, 6, 7, 8]

l = lambda x: x[-1]
print(l(ls))


l = lambda l1: l1**2
print(l(25))

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''map(func, iterable) -> приминяет func для каждого элемента итерируемого объекта'''

ls = ['1', '2', '3', '4', '5', '6', '7', '8']

for i in map(int, ls):
    print(i)

print(list(map(int, ls)))


ls = input()
a, b = map(int, ls.split())
print(a)
print(b)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

ls = [1, 2, 3, 4, 5, 6, 7, 8]
l = list(map(lambda x: x**2, ls))
print(l)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''filter(func, iterable) -> фильтрует элеиенты итерируемого объекта, основываясь на результат функции'''

def f(n):
    if n % 2 == 0:
        return True
    return False

ls = [1, 2, 3, 4, 5, 6, 7, 8]

res = list(filter(f, ls))
print(res)


res = list(filter(lambda x: x % 2 == 0, ls))
print(res)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

ls = ['Тима', 'Аливия', 'Ульяна']
v = 'АНОУИЭЮЯ'

r = list(filter(lambda n: n.upper().startswith(tuple(v)),ls))
print(r)


'''reduce(func, iterable) -> нужно импортировать из functoolsя, возвращает один результат'''
from functions import reduce

# сумма
ls = [1, 2, 3, 4, 5, 6, 7, 8]
r = reduce(lambda x, y: x + y, ls)
print(r)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''enumerate -> нумерует элементы последовательности от 0'''

ls = ['Тима', 'Аливия', 'Ульяна']
print(list(enumerate(ls, 1))) # нумерует с 1

'''zip(iterable, iterable..., [*iterables]) -> сопоставляет каждый элемент последовательности co следующим'''

ls = [1, 2, 3, 4, 5, 6, 7, 8]
ls1 = ['Тима', 'Аливия', 'Ульяна']
for i in zip(ls, ls1):
    print(i)


d = {1: 2, 3: 4, 5: 6}
def c(v):
    return str(v)

res = list(map(c, d.values()))
n = dict(zip(d.keys(), res))
print(n)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

ls = [1, 2, 3, 4, 5, 6, 7, 8]

for i in map(int, ls):
    if i % 2 == 0:
        print(f'{i} четное')
    else:
        print(f'{i} нечетое')


res = list(map(lambda x: 'нечетное' if x % 2 else 'четное', ls))
print(res)
